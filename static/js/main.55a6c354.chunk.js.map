{"version":3,"sources":["logo.svg","reducers/rootReducer.js","reducers/fooReducer.js","store.js","containers/OSHomePage.js","actions/fooAction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","combineReducers","foo","state","arguments","length","undefined","action","type","name","payload","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","OSHomePage","_this$props","this","props","updateBarData","react_default","a","createElement","onClick","Component","connect","dispatch","data","barAction","App","className","src","logo","alt","containers_OSHomePage","Boolean","location","hostname","match","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kNCGzBC,cAAgB,CAC3BC,ICJW,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,MACX,IAAK,aACD,MAAO,CACHC,KAAMF,EAAOG,SAErB,QACI,OAAOP,MCHbQ,EAAkBC,OAAOC,sCAAwCC,kECAjEC,0LACO,IAAAC,EAC2BC,KAAKC,MAA7BT,EADHO,EACGP,KAAMU,EADTH,EACSG,cACd,OACIC,EAAAC,EAAAC,cAAA,+BACsBb,EAClBW,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMJ,EAAc,eAArC,eANSK,cA0BVC,cAdS,SAACtB,GAErB,MAAO,CACHM,KAFaN,EAAMD,IAAfO,OAMe,SAACiB,GAIxB,MAAO,CAAEP,cAHa,SAACQ,GACnBD,EClBiB,SAACC,GACtB,MAAO,CACHnB,KAAM,aACNE,QAASiB,GDeAC,CAAUD,OAKZF,CAA6CV,GEZ7Cc,mLAXX,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cAChBV,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCb,EAAAC,EAAAC,cAACY,EAAD,eANQV,aCOEW,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACLpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUC,MLHC,WACd,OADuDtC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAChDuC,YACLC,EACAjC,EAAgBkC,YAAgBC,OKAdC,IACb3B,EAAAC,EAAAC,cAAC0B,EAAD,OAEJC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.55a6c354.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { combineReducers } from 'redux';\r\nimport fooReducer from './fooReducer';\r\n\r\nexport default combineReducers({\r\n    foo: fooReducer\r\n});","export default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'BAR_ACTION':\r\n            return {\r\n                name: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n   rootReducer,\r\n   composeEnhancer(applyMiddleware(thunk))\r\n );\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { barAction } from '../actions/fooAction'\r\n\r\nclass OSHomePage extends Component {\r\n    render() {\r\n        const { name, updateBarData } = this.props;\r\n        return (\r\n            <div>\r\n                OS booting name: {name}\r\n                <button onClick={() => updateBarData('Priyanshu')}>Bar</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { name } = state.foo;\r\n    return {\r\n        name\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    const updateBarData = (data) => {\r\n        dispatch(barAction(data))\r\n    };\r\n    return { updateBarData };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OSHomePage);\r\n","export const simpleAction = () => dispatch => {\r\n    dispatch({\r\n        type: 'SIMPLE_ACTION',\r\n        payload: 'result_of_simple_action'\r\n    })\r\n}\r\n\r\nexport const barAction = (data) => {\r\n    return {\r\n        type: 'BAR_ACTION',\r\n        payload: data\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OSHomePage from './containers/OSHomePage'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <OSHomePage/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}